/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
 
//BF time limit exceeded

var isAnagram = function(s, t) {
    //delete letter one by one from t, the order of delete comes from s, if t is all deleted after s is all iterated then pass
    const len = s.length;
    if (s.length !== t.length){
        return false;
    }
    if(len == 0){
        return true;
    }
    
    const arr = []
    for (i=0;i < len; i++){
        arr.push(s[i])
    }
    console.log(arr)
    
    for(i = 0; i < len; i++){ //index of char in t
        for(j = 0; j < len; j++){ // index of elements in arr

            if(t[i] == arr[j]){
                arr.splice(j,1);
            }
        }
    }
    if(arr.length == 0 ){
        return true
    }
    return false
};


/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
 
 //sort both compare
 
var isAnagram = function(s, t) {

    //sort both string, compare
    
    const len = s.length

    if (s.length !== t.length){
        return false;
    }
    if(len == 0){
        return true;
    }
    
    const arr = []
    for (i=0;i < len; i++){
        arr.push(s[i])
    }
    arr.sort()
    
    const arr1 = []
    for (i=0;i < len; i++){
        arr1.push(t[i])
    }
    arr1.sort()

    for(i = 0; i< len; i++){
        if(arr[i] !== arr1[i]){
            return false      
        }
    }
    return true
}

/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
 
 //use map
把s string中的字母作为key 出现次数作为value 存入map  然后loop过t每当 t中出现的字母 就从map中对应的字母的值减去一
var isAnagram = function(s, t) {

   //use map
    const map = {}
    const len = s.length
    if(s.length !== t.length){
        return false
    }
    
    for(i = 0; i < len; i++){
    if(s[i] in map){
        map[s[i]] +=1
    }else{
        map[s[i]] = 1
    }
}
    for(i = 0; i < len; i++){
    if(t[i] in map){
        map[t[i]] -= 1
        if(map[t[i]]==0){
            delete map[t[i]]
        }
    }else{
        return false
    }
}
    return Object.keys(map).length === 0;
}
    
