/**
 * @param {string} num1
 * @param {string} num2
 * @return {string}
 */
 //思路是手算做加法时的逻辑： 从后往前由末尾把两个个位相（与进位情况）加 若超9 则继续进位 把得出结果的最后一位记录到答案最右位 从2个原数字中去掉已计算的末尾 继续重复过程 直到只有其中一个数字还有剩余位，
 //同样将其末尾 与进位情况相加并将结果最后一位记录 直至加完此数字 若最后两个数字全部遍历完有进位 则答案加一至最高位数 
var addStrings = function(num1, num2) {
    //
    var res = ""
    var len1 = num1.length
    var len2 = num2.length
    var carry = 0
    var n = 0; //temp
    while(len1 >  0 || len2 > 0){     //still numbers to add
        if(len1 == 0 && carry == 0){               //when only one number remain, no carryover
            res = num2.slice(0,len2) + res
            return res
        }
        if(len2 == 0 && carry == 0){
            res = num1.slice(0,len1) + res
            return res
        }
        if(len1 == 0 && carry == 1){               //when only one number remain, carryover
            if(num2[len2-1]== "9"){                                          //when last digit is 9
                res = "0" + res
            }
            else{
                res = ((parseInt(num2[len2-1])+1).toString()) + res          //last digit not 9
                carry = 0
            }
              len2 -= 1    
        }
        else if(len2 == 0 && carry == 1){             
            if(num1[len1-1]== "9"){
                res = "0" + res
            }
            else{
                res = ((parseInt(num1[len1-1])+1).toString()) + res
                carry = 0
            }
              len1 -= 1    
        }
        else if(carry == 0){                  //both number remain, no carryover
            n = parseInt(num1[len1-1])+parseInt(num2[len2-1])
            if(n > 9){         //last digit sum > 9
                carry = 1
                 res = n.toString()[1] + res
            }else{                  //last digit sum <= 9
            res = n.toString() + res
            }
            len1-=1
            len2-=1
        }else{                       //both number remain, carryover
            n = parseInt(num1[len1-1])+parseInt(num2[len2-1]) + 1
            if(n > 9){         //last digit sum > 9
                 res = n.toString()[1] + res
            }else{                  //last digit sum <= 9
            res = n.toString() + res
            carry = 0
            }
            len1-=1
            len2-=1
        }
    }
    if(carry ==1){
        res = "1" + res
    }
    return res
};

/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
//nums1 有效数字中 从后往前读 与nums2从后往前相比较 大的数放在nums1从后往前放

var merge = function(nums1, m, nums2, n) {

    const len = nums1.length;
    var p1 = m - 1     //two pointers one for each nums
    var p2 = n - 1
    
    for(i= nums1.length - 1; i>=0; i--){
        if(p2 < 0){
            break
        }
        if(nums1[p1]>nums2[p2]){          //p1 bigger
            nums1[i] = nums1[p1]
            p1 --
        }else{
            nums1[i] = nums2[p2]
            p2 --
        }  
    }

};
